-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package wave
@version 0.1.0.0

module JS.Ast
type Var = Text
type Record a = Map Var a
data Lit
LInt :: Int -> Lit
LBool :: Bool -> Lit
LFloat :: Float -> Lit
LString :: Text -> Lit
data Statement
SExpr :: Expr -> Statement
SRet :: Expr -> Statement
SDef :: Definition -> Statement
type Sub = [Statement]
data Expr
ELit :: Lit -> Expr
EVar :: Var -> Expr
EFun :: [Var] -> Sub -> Expr
EFunCall :: Expr -> [Expr] -> Expr
ERecord :: Record Expr -> Expr
data Definition
Variable :: Var -> Expr -> Definition
Function :: Var -> [Var] -> Sub -> Definition
newtype File
File :: [Statement] -> File
instance GHC.Show.Show JS.Ast.Lit
instance GHC.Show.Show JS.Ast.Statement
instance GHC.Show.Show JS.Ast.Expr
instance GHC.Show.Show JS.Ast.Definition
instance GHC.Show.Show JS.Ast.File

module JS.Pretty
pp :: (a -> Doc ann) -> a -> Text
render :: Doc a -> Text
ppFile :: File -> Doc a
ppRecord :: (a -> Doc ann) -> Record a -> Doc ann
ppLit :: Lit -> Doc a
ppSub :: Sub -> Doc a
ppDef :: Definition -> Doc a
ppStatement :: Statement -> Doc a
ppExpr :: Expr -> Doc a
isSimpleExpr :: Expr -> Bool

module Wave.Ast
type Var = Text
type Record a = Map Var a
data Lit
LInt :: Int -> Lit
LFloat :: Float -> Lit
LString :: Text -> Lit
data Statement
SExpr :: Expr -> Statement
SDef :: Definition -> Statement
type Sub = [Statement]
data Expr
ELit :: Lit -> Expr
EVar :: Var -> Expr
EFun :: [Var] -> Sub -> Expr
EFunCall :: Expr -> [Expr] -> Expr
ERecord :: Record Expr -> Expr
Effi :: Text -> [Expr] -> Expr
data Definition
Variable :: Var -> Expr -> Definition
Function :: Var -> [Var] -> Sub -> Definition
newtype File
File :: [Definition] -> File
instance GHC.Show.Show Wave.Ast.Lit
instance GHC.Show.Show Wave.Ast.Statement
instance GHC.Show.Show Wave.Ast.Expr
instance GHC.Show.Show Wave.Ast.Definition
instance GHC.Show.Show Wave.Ast.File

module CodeGen
translateFile :: File -> File
translateDef :: Definition -> Definition
translateExpr :: Expr -> Expr
translateLit :: Lit -> Lit
translateStatement :: Statement -> Statement
translateSub :: Sub -> Sub

module Compile
compile :: File -> Text
